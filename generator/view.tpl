{{- define "header"}}
    // DO NOT EDIT!!!
    // Code generated by go-generated-views
    // Version: {{ .version }}
    // Revision: {{ .revision }}
    // Build Date: {{ .buildDate }}
    // Built By: {{ .builtBy }}
    {{ range $idx, $tag := .buildTags }}
        //go:build {{$tag}}
        // +build {{$tag}}
    {{- end }}

    package {{.package}}
{{end -}}

{{- define "views"}}
    {{- $commonViewName := .commonView -}}
    {{ range $structIndex, $struct := .structs }}
        {{- $structName := $struct.Name -}}
        {{- $fields := $struct.Fields -}}
        {{ range $viewIndex, $viewName := $struct.Views }}
            // {{ $structName }}{{ $viewName }}View represents view for model {{ $structName }}
            type {{ $structName }}{{ $viewName }}View struct {
                {{- range $fieldIndex, $field := $fields }}
                    {{- $fieldTag := "" -}}
                    {{- with index $field.Tag $commonViewName }}
                        {{- $fieldTag = . -}}
                    {{- end }}
                    {{- with index $field.Tag $viewName }}
                        {{- $fieldTag = . -}}
                    {{- end }}
                    {{ $field.Name }} {{ $field.Type }}{{if $fieldTag }} `{{ $fieldTag }}`{{end}}
                {{- end }}
            }
        {{ end }}
    {{- end }}
{{end}}

{{- define "methods"}}
    {{- $commonViewName := .commonView -}}
    {{ range $structIndex, $struct := .structs }}
        {{- $structName := $struct.Name -}}
        {{- $fields := $struct.Fields -}}
        {{ range $viewIndex, $viewName := $struct.Views }}
            // ToModel change pointer from {{ $structName }}{{ $viewName }}View to {{ $structName }}
            func (view *{{ $structName }}{{ $viewName }}View) ToModel() *{{ $structName }} {
                return (*{{ $structName }})(view)
            }

            // New{{ $structName }}{{ $viewName }}View change pointer from {{ $structName }} to {{ $structName }}{{ $viewName }}View
            func New{{ $structName }}{{ $viewName }}View(model *{{ $structName }}) *{{ $structName }}{{ $viewName }}View {
                return (*{{ $structName }}{{ $viewName }}View)(model)
            }
        {{ end }}
    {{- end }}
{{end}}
